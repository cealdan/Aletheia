
@Composable
fun MindProfile(username: String, firstName : String, lastName : String) {
    val context = LocalContext.current.applicationContext // Utilisation de LocalContext pour obtenir le contexte
    var isStreaming by remember { mutableStateOf(false) }
    var eegData by remember { mutableStateOf(listOf<Float>()) }
    var emotionLabel by remember { mutableStateOf("") }
    var isLoading by remember { mutableStateOf(true) }
    var label by remember { mutableStateOf("") }
    var load by remember { mutableStateOf(true) }

    LaunchedEffect(isStreaming) {
        if (isStreaming) {
            CoroutineScope(Dispatchers.IO).launch {
                Log.d("MindProfile", "Starting to fetch data...")
                while (true) {
                    try {
                        eegData = withContext(Dispatchers.IO) { RetrofitInstance.api.getData() }
                        emotionLabel =
                            withContext(Dispatchers.IO) { RetrofitInstance.api.getLabel() }
                        isLoading = false
                        if (!load) {
                            break
                        }
                    } catch (e: Exception) {
                        emotionLabel = "Error fetching data"
                        Log.d("MindProfile", "Impossible to fetch data...: ${e.message}", e)
                        isLoading = false
                    }
                }
            }
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()

            .background(Color(0xFF000000)),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {

        Spacer(modifier = Modifier.height(100.dp))
        Text(
            text = "Bonjour $firstName,",
            fontSize = 30.sp,
            fontWeight = FontWeight.Bold,
            fontFamily = FontFamily.Serif,
            color = Color(0xFFE0F7FA),
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 24.dp)
        )
        Box(

            modifier = Modifier
                .clip(RoundedCornerShape(250.dp)) // Define the rounded shape
                .background(Color(0xFFE0F7FA)) // Background color
                .padding(vertical = 12.dp, horizontal = 15.dp)
                .height(100.dp) // Hauteur fixe pour la fenêtre

                .padding(8.dp),

            contentAlignment = Alignment.Center,
        ) {
            // Affichage du graphique des données EEG
            if (isStreaming && !isLoading) {

                AndroidView(
                    modifier = Modifier.fillMaxSize(),
                    factory = { context ->
                        LineChart(context).apply {
                            // Préparation des données pour le graphique
                            val entries = eegData.mapIndexed { index, value ->
                                Entry(index.toFloat(), value)
                            }

                            val dataSet = LineDataSet(entries, "").apply {
                                color = 0xFF000000.toInt()
                                valueTextColor = 0xFF0000FF.toInt()
                                lineWidth = 2f  // Épaisseur de la courbe
                                setDrawValues(false)
                                setDrawCircles(false)
                            }

                            val lineData = LineData(dataSet)
                            this.data = lineData

                            // Configuration du graphique
                            this.xAxis.isEnabled = false
                            this.axisLeft.isEnabled = false
                            this.axisRight.isEnabled = false
                            this.legend.isEnabled = false  // Masquer la légende
                            this.description.isEnabled = false
                            this.setTouchEnabled(false)  // Désactive les interactions tactiles
                            this.isHighlightPerTapEnabled = false
                            this.invalidate() // Actualise le graphique
                        }
                    }
                )
            }
        }
        label = if (isStreaming) {
            emotionLabel
        } else {
            "..."
        }
        // Label de l'émotion, en dessous de la fenêtre
        Text(
            text = if (isStreaming) "Vous êtes $label" else "Connectez votre Aletheia en appuyant sur le bouton en bas de l'écran",
            textAlign = TextAlign.Center,
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            fontFamily = FontFamily.Serif,
            color = Color(0xFFE0F7FA),
            modifier = Modifier
                .padding(top = 16.dp)
        )
        BottomBar(onFabClick = {
            // Logique pour démarrer l'appairage et le streaming
            if (!isStreaming) {
                // Commencer l'appairage et démarrer le streaming EEG
                isStreaming = true
                load = true

                showFloatingToast(context, "Streaming EEG démarré")

                // Ajoutez ici votre code pour démarrer le streaming EEG
            } else {
                // Si déjà en streaming, peut-être arrêter ou gérer autrement
                isStreaming = false
                load = false
                showFloatingToast(context, "Streaming EEG arrêté")
            }
        }, fabIcon = if (isStreaming) Icons.Default.Close else Icons.Default.PlayArrow
        )

    }
}
