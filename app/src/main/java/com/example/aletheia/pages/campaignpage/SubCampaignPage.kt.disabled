package com.example.aletheia.pages.campaignpage

import android.content.Context
import android.util.Log
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.Orientation
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.gestures.draggable
import androidx.compose.foundation.gestures.rememberDraggableState
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

import androidx.navigation.NavController


import androidx.activity.compose.BackHandler
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.size
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.ui.platform.LocalFocusManager
import kotlinx.coroutines.delay


import androidx.compose.animation.animateContentSize
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.LinearOutSlowInEasing
import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.animateDpAsState
import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.foundation.border
import androidx.compose.foundation.interaction.collectIsFocusedAsState
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.widthIn
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.material3.BasicAlertDialog
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Surface
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.drawWithCache
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.BlendMode
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.CompositingStrategy
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.graphics.lerp
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.res.vectorResource
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.window.DialogProperties
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleEventObserver
import androidx.lifecycle.compose.LocalLifecycleOwner
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.compose.currentBackStackEntryAsState
import com.example.aletheia.AletheiaTheme
import com.example.aletheia.NoRippleIconButton
import com.example.aletheia.R
import com.example.aletheia.RetrofitInstance
import com.example.aletheia.ThemeViewModel
import com.example.aletheia.pages.creationpage.isKeyboardVisible
import com.example.aletheia.pages.creationpage.simulateAiResponse
import com.example.aletheia.viewmodels.EvalAiContentModel
import com.example.aletheia.viewmodels.GetCampaigns
import com.example.aletheia.viewmodels.GetPages
import kotlinx.coroutines.Job
import kotlin.math.abs

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SwipeableOption(
    navcontroller: NavController,
    getPages: GetPages,
    getCampaignsModel: GetCampaigns,
    themeViewModel: ThemeViewModel,
    option: List<String>,
    onSwipe: () -> Unit,
    isExpanded: Boolean,
    onExpand: () -> Unit,
) {

    var CampaignName = option.getOrNull(0) ?: "N/A"
    var Date = option.getOrNull(1) ?: "N/A"
    var UserName = option.getOrNull(2) ?: "N/A"
    var CampaignType = option.getOrNull(3) ?: "N/A"
    var GenType = option.getOrNull(4) ?: "N/A"
    var CampaignDescription = option.getOrNull(5) ?: "N/A"
    var NumberOfDataPts = option.getOrNull(6) ?: "N/A"
    var PerDataPtPrice = option.getOrNull(7) ?: "N/A"
    var AssociatedContent = option.getOrNull(8) ?: "N/A"

    val icon = if (CampaignType == "Supervised Learning") painterResource(id = R.drawable.supervisedlearningicon) else painterResource(id = R.drawable.newposticon /*placeholder*/) //à adapter pour tous les types possibles


    if (PerDataPtPrice != "N/A") {
        val Gain = PerDataPtPrice.toFloat() / 2
    }


    var infoDialog by remember { mutableStateOf(false) }




    val offsetX = remember { Animatable(0f) } // Pour animer le déplacement


    val onbackgroundColor = MaterialTheme.colorScheme.onBackground
    val swipeThreshold = 400f // Seuil pour considérer le swipe comme réussi
    val maxwidth = 150f
    val scope = rememberCoroutineScope() // Pour lancer les animations
    val maxOffset = 1000f// Déplacement maximal
    val context = LocalContext.current // Utilisation de LocalContext pour obtenir le contexte
    val prefs = context.getSharedPreferences("pref", Context.MODE_PRIVATE)
    var isVisible by remember { mutableStateOf(false) }
    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()
    // Couleur de fond qui change en fonction du déplacement
    var isMoving by remember {mutableStateOf(false)}
    val alphaswipe by animateFloatAsState(
        targetValue = if (isVisible) 1f else 0f,
        animationSpec = tween(durationMillis = 1000)
    )
    val boxcolor = lerp(
        if (isDarkTheme) Color(
            0xFF1A1A1A
        ) else Color.White,
        MaterialTheme.colorScheme.primary,
        (offsetX.value/400f).coerceIn(0f, 1f)
    )

    val offsetXswipe by animateFloatAsState(
        targetValue = if (isMoving) 15f else 0f,
        animationSpec = tween(durationMillis = 3000)
    )
    var launch by remember {mutableStateOf(false)}


    val campaignName by getPages.campaignName.collectAsState()
    var isAssociated = (CampaignName == campaignName && campaignName != "")


    val alphaexpand by animateFloatAsState(
        targetValue = if (isExpanded.xor(isAssociated)) 1f else 0f,
        animationSpec = tween(durationMillis = 300)
    )
    val currentRoute = navcontroller.currentBackStackEntryAsState().value?.destination?.route



    val lifecycleOwner = LocalLifecycleOwner.current
    val lifecycle = lifecycleOwner.lifecycle

    DisposableEffect(lifecycle) {
        val observer = LifecycleEventObserver { _, event ->
            if (event == Lifecycle.Event.ON_PAUSE) {
                if (currentRoute != "profil") {
                    getPages.clearCampaignID()
                    isAssociated = false
                }
                Log.d("Lifecycle", "La page est en pause (tu quittes la destination)")
            }
        }
        lifecycle.addObserver(observer)
        onDispose {
            lifecycle.removeObserver(observer)
        }
    }

    LaunchedEffect(launch) {
        if (launch) {
            isVisible = true
            isMoving = true
            delay(2000)
            isVisible = false
            isMoving = false
        }
    }
    val borderWidth: Dp by animateDpAsState(
        targetValue = if (alphaexpand == 1f) 2.dp else 0.dp, // Changer la taille de la bordure
        animationSpec = tween(durationMillis = 200) // Durée de l'animation
    )

    Box(
        modifier = Modifier
            .wrapContentSize(),

        ) {

            Row(
                modifier = Modifier
                    .align(Alignment.TopCenter)
                    .fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically

            ) {
                Box(
                    modifier = Modifier
                        .width(
                            (offsetX.value.dp / (swipeThreshold / maxwidth)).coerceIn(
                                0.dp,
                                maxwidth.dp
                            )
                        )
                        .background(boxcolor)
                        .height(60.dp)

                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.addbookmarkicon),
                        contentDescription = "Save Campaign",
                        modifier = Modifier
                            .padding(8.dp)
                            .align(Alignment.CenterEnd)
                            .alpha((offsetX.value / swipeThreshold).coerceIn(0f, 1f)),
                        tint = MaterialTheme.colorScheme.onBackground
                    )
                }

                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .animateContentSize() // Anime la modification de taille
                        .height(if (isExpanded.xor(isAssociated)) 225.dp else 60.dp)
                        .background(if (isExpanded.xor(isAssociated)) {if (isDarkTheme) Color(0xFF1A1A1A) else MaterialTheme.colorScheme.primary.copy(0.1f)} else Color.Transparent)
                        .pointerInput(Unit) {
                            detectTapGestures(
                                onTap = {
                                    onExpand()
                                    getPages.clearCampaignID()
                                    isAssociated = false
                                    if (launch) {
                                        launch = false
                                    } else {
                                        launch = true
                                    }
                                }
                            )
                        }
                        .draggable(
                            state = rememberDraggableState { delta ->
                                scope.launch {
                                    if (!isExpanded.xor(isAssociated) && (currentRoute != "profil")) {
                                        offsetX.snapTo((offsetX.value + delta).coerceIn(0f, maxOffset))
                                    }
                                }
                            },
                            orientation = Orientation.Horizontal,
                            onDragStopped = { velocity ->
                                scope.launch {
                                    if (offsetX.value > swipeThreshold) {
                                        offsetX.animateTo(
                                            targetValue = 0f,
                                            animationSpec = tween(300)
                                        )
                                        onSwipe()
                                    } else {
                                        // Retour à la position initiale
                                        offsetX.animateTo(
                                            targetValue = 0f,
                                            animationSpec = tween(300)
                                        )
                                    }
                                }
                            }
                        )
                ) {
                    Icon(
                        painter = icon,
                        contentDescription = "CampaignType icon",
                        tint = MaterialTheme.colorScheme.onBackground,
                        modifier = Modifier.size(20.dp).offset(y = 12.dp, x = 8.dp)
                            .offset(x = -offsetX.value.dp) // Déplace vers la gauche au swipe
                            .alpha(1f - (offsetX.value / swipeThreshold).coerceIn(0f, 1f))
                    )
                    Text(
                        text = "$CampaignName           ${PerDataPtPrice.toFloat() * NumberOfDataPts.toInt()}€",
                        fontSize = 16.sp,
                        modifier = Modifier
                            //.offset(x = -offsetX.value.dp) // Déplace vers la gauche au swipe
                            .alpha(1f - (offsetX.value).coerceIn(0f, 1f))
                            .align(Alignment.TopStart)
                            .padding(8.dp).padding(start = 28.dp),
                        fontFamily = FontFamily.Serif,
                        color = MaterialTheme.colorScheme.onBackground
                    )
                    if (isExpanded.xor(isAssociated)) {
                        IconButton(
                            onClick = {
                                if (currentRoute == "profil") {
                                    getCampaignsModel.toggleProfileShow()

                                    getPages.goCampaign(CampaignName) //NE FONCTIONNE PAS
                                    navcontroller.navigate("campaign") {
                                        popUpTo(navcontroller.graph.startDestinationId) { saveState = true }
                                        launchSingleTop = true
                                        restoreState = true
                                    }
                                } else {
                                    getCampaignsModel.toggleShow()
                                    getCampaignsModel.setNameOfCurrentCampaign(CampaignName)
                                }
                            },
                            modifier = Modifier.align(Alignment.TopEnd).padding(start = 8.dp)
                                .offset(y = -5.dp)
                        ) {
                            Icon(
                                modifier = Modifier.size(30.dp),
                                painter = painterResource(id = R.drawable.startcampaignicon),
                                contentDescription = "Expand",
                                tint = MaterialTheme.colorScheme.onBackground
                            )
                        }
                        HorizontalDivider(modifier = Modifier
                            .width(100.dp)
                            .align(Alignment.TopCenter)
                            .padding(top = 40.dp),
                            color = MaterialTheme.colorScheme.onBackground
                        )

                    }


                }


            }
            if (isExpanded.xor(isAssociated)) {
                Column(
                    modifier = Modifier
                        .alpha(alphaexpand)
                        .wrapContentSize()
                        .padding(bottom = 10.dp, top = 10.dp).offset(x = -6.dp),
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.Center
                ) {
                    Row(
                        modifier = Modifier
                            .padding(top = 40.dp)

                    ) {
                        Text(
                            text = CampaignDescription,
                            fontSize = 16.sp,
                            modifier = Modifier
                                .weight(1.5f)
                                .alpha(alphaexpand)
                                .padding(8.dp).padding(start = 12.dp),
                            fontFamily = FontFamily.SansSerif,
                            color = MaterialTheme.colorScheme.onBackground
                        )
                        Column(
                            modifier = Modifier
                                .alpha(alphaexpand)
                                .wrapContentSize()
                                .padding(bottom = 10.dp, top = 10.dp).offset(x = -6.dp)
                                .weight(0.5f),
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.Center
                        ) {
                            Column(
                                modifier = Modifier

                                    .wrapContentSize()
                                    .border(
                                        width = borderWidth,
                                        color = MaterialTheme.colorScheme.primary,
                                        shape = RoundedCornerShape(8.dp)
                                    ),
                                horizontalAlignment = Alignment.CenterHorizontally,
                                verticalArrangement = Arrangement.Center
                            ) {
                                Row(modifier = Modifier.wrapContentSize()) {
                                    Text(
                                        text = "$PerDataPtPrice€",
                                        fontSize = 16.sp,
                                        modifier = Modifier
                                            .padding(8.dp),
                                        fontFamily = FontFamily.SansSerif,
                                        color = MaterialTheme.colorScheme.onBackground
                                    )
                                    Icon(
                                        painter = painterResource(id = R.drawable.rewardicon),
                                        contentDescription = "CampaignType icon",
                                        tint = MaterialTheme.colorScheme.primary,
                                        modifier = Modifier.size(20.dp).offset(y = 9.dp, x = -5.dp)
                                            .offset(x = -offsetX.value.dp) // Déplace vers la gauche au swipe
                                            .alpha(
                                                1f - (offsetX.value / swipeThreshold).coerceIn(
                                                    0f,
                                                    1f
                                                )
                                            )
                                    )
                                }
                                Spacer(modifier = Modifier.height(10.dp))
                                Row(modifier = Modifier.wrapContentSize()) {

                                    Text(
                                        text = NumberOfDataPts,
                                        fontSize = 16.sp,
                                        modifier = Modifier
                                            .padding(8.dp),
                                        fontFamily = FontFamily.SansSerif,
                                        color = MaterialTheme.colorScheme.onBackground
                                    )

                                    Icon(
                                        painter = painterResource(id = R.drawable.databaseicon),
                                        contentDescription = "CampaignType icon",
                                        tint = MaterialTheme.colorScheme.primary,
                                        modifier = Modifier.size(20.dp).offset(y = 9.dp, x = -5.dp)
                                            .offset(x = -offsetX.value.dp) // Déplace vers la gauche au swipe
                                            .alpha(
                                                1f - (offsetX.value / swipeThreshold).coerceIn(
                                                    0f,
                                                    1f
                                                )
                                            )
                                    )
                                }

                            }
                            Row(
                                modifier = Modifier.padding(top = 8.dp),

                                verticalAlignment = Alignment.CenterVertically,
                            ) {
                                NoRippleIconButton(
                                    onClick = {
                                        infoDialog = true
                                    }
                                ) {
                                    Icon(
                                        painter = painterResource(id = R.drawable.infoicon),
                                        contentDescription = "NewPost",
                                        tint = MaterialTheme.colorScheme.onBackground,
                                        modifier = Modifier.size(30.dp)
                                    )
                                }
                                if (AssociatedContent != "") {
                                    NoRippleIconButton(
                                        onClick = {
                                            if (currentRoute == "campaign") {
                                                getCampaignsModel.goContent(AssociatedContent)
                                                navcontroller.navigate("home") {
                                                    popUpTo(navcontroller.graph.startDestinationId) { saveState = true }
                                                    launchSingleTop = true
                                                    restoreState = true
                                                }
                                            } else {
                                                getCampaignsModel.toggleProfileShow()
                                                getCampaignsModel.goContent(AssociatedContent)
                                                navcontroller.navigate("home") {
                                                    popUpTo(navcontroller.graph.startDestinationId) { saveState = true }
                                                    launchSingleTop = true
                                                    restoreState = true
                                                }
                                            }
                                        }
                                    ) {
                                        Icon(
                                            painter = painterResource(id = R.drawable.gotohomeicon),
                                            contentDescription = "Content",
                                            tint = MaterialTheme.colorScheme.primary,
                                            modifier = Modifier.size(30.dp)
                                        )
                                    }
                                    Spacer(modifier = Modifier.height(8.dp))
                                }
                            }

                        }
                    }
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically

                    ) {
                        Text(
                            text = "@$UserName",
                            fontSize = 10.sp,
                            modifier = Modifier
                                .alpha(alphaexpand)
                                .padding(8.dp).padding(start = 8.dp),
                            fontFamily = FontFamily.SansSerif,
                            color = MaterialTheme.colorScheme.onBackground
                        )
                        Text(
                            text = Date,
                            fontSize = 10.sp,
                            modifier = Modifier
                                .alpha(alphaexpand)
                                .padding(8.dp).padding(end = 8.dp),
                            fontFamily = FontFamily.SansSerif,
                            color = MaterialTheme.colorScheme.onBackground
                        )
                    }
                }
            }
        }
    if (infoDialog) {
        BasicAlertDialog(
            onDismissRequest = { infoDialog = false },
            properties = DialogProperties(usePlatformDefaultWidth = false),
            modifier = Modifier
                .clip(RoundedCornerShape(16.dp))
                .widthIn(200.dp, 300.dp)
                .background(
                    if (isDarkTheme) Color(0xFF1A1A1A) else Color.White
                )
        ) {
            Column(
                modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth(),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Icon(
                    painter = icon,
                    contentDescription = "Type icon",
                    tint = if (isDarkTheme) Color.White else Color.Black,
                    modifier = Modifier.size(40.dp)
                )
                Text(
                    text = stringResource(id = R.string.infocampagne) + " " + CampaignType,
                    fontSize = 18.sp,
                    color = if (isDarkTheme) Color.White else Color.Black,
                    textAlign = TextAlign.Center
                )

                Text(
                    modifier = Modifier.padding(top = 8.dp),
                    text = if (CampaignType == "Supervised Learning") stringResource(id = R.string.expliquersupervisedlearning) else "", //à compléter
                    fontSize = 14.sp,
                    color = if (isDarkTheme) Color.White else Color.Black,
                    textAlign = TextAlign.Start
                )

                Spacer(modifier = Modifier.height(16.dp))

                // Logos et explications
                Column(
                    verticalArrangement = Arrangement.spacedBy(12.dp),
                    horizontalAlignment = Alignment.Start
                ) {
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Icon(
                            painter = painterResource(id = R.drawable.rewardicon),
                            contentDescription = "Logo EEG",
                            modifier = Modifier.size(40.dp),
                            tint = MaterialTheme.colorScheme.primary
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = stringResource(id = R.string.rewardcampaign),
                            fontSize = 14.sp,
                            color = if (isDarkTheme) Color.White else Color.Black
                        )
                    }

                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Icon(
                            painter = painterResource(id = R.drawable.databaseicon),
                            contentDescription = "Logo AI",
                            modifier = Modifier.size(40.dp),
                            tint = MaterialTheme.colorScheme.primary
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = stringResource(id = R.string.datacampaign),
                            fontSize = 14.sp,
                            color = if (isDarkTheme) Color.White else Color.Black
                        )
                    }

                    if (AssociatedContent != "") {

                        HorizontalDivider(
                            modifier = Modifier
                                .width(100.dp),
                            color = MaterialTheme.colorScheme.onBackground
                        )

                        Row(verticalAlignment = Alignment.CenterVertically) {
                            Icon(
                                painter = painterResource(id = R.drawable.gotohomeicon),
                                contentDescription = "Logo AI",
                                modifier = Modifier.size(40.dp),
                                tint = MaterialTheme.colorScheme.primary
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                text = stringResource(id = R.string.associatedcontentcampaign),
                                fontSize = 14.sp,
                                color = if (isDarkTheme) Color.White else Color.Black
                            )
                        }
                    }
                }
            }
        }
    }
}


@Composable
fun PromptCard(getCampaigns: GetCampaigns, HowManyGenData: String, themeViewModel: ThemeViewModel) {
    var messages by remember { mutableStateOf(listOf<Pair<String, String>>()) }
    var response by remember { mutableStateOf(listOf<String>()) }
    var userInput by remember { mutableStateOf("") }
    val coroutineScope = rememberCoroutineScope()
    val focusManager = LocalFocusManager.current

    val context = LocalContext.current // Utilisation de LocalContext pour obtenir le contexte
    val prefs = context.getSharedPreferences("pref", Context.MODE_PRIVATE)

    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()

    val offsetY by animateDpAsState(if (isKeyboardVisible()) 0.dp else -100.dp, label = "KeyboardOffset")
    val listState = rememberLazyListState()

    val interactionSource = remember { MutableInteractionSource() }
    val isFocused by interactionSource.collectIsFocusedAsState()
    var isLoading by remember { mutableStateOf(false) }
    var begin by remember { mutableStateOf(false) }

    val generateicon = painterResource(id = R.drawable.generateicon)
    val generatingicon = painterResource(id = R.drawable.assistanticon)
    val pythialogoclair = painterResource(id = R.drawable.aletheialoadingscreenclair)
    val pythialogosombre = painterResource(id = R.drawable.aletheialoadingscreensombre)


    val viewModel: EvalAiContentModel = viewModel()

    var visible by remember { mutableStateOf(false) }
    AletheiaTheme(themeViewModel, darkTheme = isDarkTheme) {

        BackHandler {
            getCampaigns.toggleShow()
        }

        Box(
            modifier = Modifier
                .fillMaxSize()
                .pointerInput(Unit) {
                    detectTapGestures(onTap = {
                        focusManager.clearFocus() // Enlève le focus des champs
                    })
                }
        ) {
            if (begin) {
                BoxWithConstraints(modifier = Modifier.fillMaxSize()) {
                    LazyColumn(
                        state = listState,
                        modifier = Modifier
                            .heightIn(max = maxHeight - 50.dp) // Ajuste la hauteur pour laisser de l'espace pour le Row
                            .padding(top = 16.dp)
                            .fillMaxWidth()
                            .padding(bottom = 8.dp) // Assurer un espace en bas pour le Row
                    ) {
                        items(messages) { (sender, message) ->
                            ChatScreen(sender, message, isLoading, HowManyGenData, themeViewModel)
                        }
                    }

                }
            } else {


                Box(modifier = Modifier
                    .padding(16.dp)
                    .fillMaxWidth()
                    .align(Alignment.Center)
                )
                {


                    Row(
                        modifier = Modifier
                            .fillMaxWidth(),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        OutlinedTextField(
                            trailingIcon = {
                                IconButton(
                                    onClick = {
                                        if (userInput.isNotBlank() && !isLoading) {
                                            begin = true
                                            val input = userInput
                                            userInput = ""
                                            messages = messages + ("Vous" to input)

                                            focusManager.clearFocus()

                                            coroutineScope.launch {
                                                listState.scrollToItem(messages.size - 1)
                                            }

                                            messages = messages + ("API" to "Chargement...")
                                            isLoading = true

                                            coroutineScope.launch {
                                                for (i in 1..HowManyGenData.toInt()) {
                                                    response += simulateAiResponse(
                                                        RetrofitInstance.api.sendPrompt(
                                                            input
                                                        )
                                                    )
                                                    viewModel.addResponse(response[i - 1])
                                                }
                                                messages =
                                                    messages.filterNot { it.first == "API" && it.second == "Chargement..." }
                                                messages = messages + ("API" to response[0])
                                                isLoading = false

                                            }
                                        }
                                    },
                                    modifier = Modifier
                                        .padding(13.dp)
                                        .size(25.dp)
                                ) {
                                    if (!isLoading) {
                                        Icon(
                                            generateicon,
                                            contentDescription = "Send",
                                            tint = MaterialTheme.colorScheme.onBackground,
                                            modifier = Modifier.size(50.dp)
                                        )
                                    }

                                }
                            },
                            shape = RoundedCornerShape(50.dp),
                            colors = TextFieldDefaults.colors(
                                focusedContainerColor = Color.Transparent,
                                unfocusedContainerColor = Color.Transparent,
                                focusedIndicatorColor = MaterialTheme.colorScheme.primary,
                                unfocusedIndicatorColor = MaterialTheme.colorScheme.onBackground,
                            ),
                            interactionSource = interactionSource,
                            value = userInput,
                            onValueChange = {
                                userInput = it
                            },
                            placeholder = { if (!isFocused) Text(stringResource(id = R.string.prompt), color = MaterialTheme.colorScheme.onBackground) },
                            modifier = Modifier.weight(1f)
                            ,
                            keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Send),
                            keyboardActions = KeyboardActions(onSend = {
                                if (userInput.isNotBlank() && !isLoading) {
                                    begin = true
                                    val input = userInput
                                    userInput = ""
                                    messages = messages + ("Vous" to input)

                                    focusManager.clearFocus()

                                    coroutineScope.launch {
                                        listState.scrollToItem(messages.size - 1)
                                    }

                                    messages = messages + ("API" to "Chargement...")
                                    isLoading = true

                                    coroutineScope.launch {

                                        withContext(Dispatchers.IO) {
                                            for (i in 1..HowManyGenData.toInt()) {
                                                response += simulateAiResponse(RetrofitInstance.api.sendPrompt(input))
                                                viewModel.addResponse(response[i-1])
                                            }
                                            messages =
                                                messages.filterNot { it.first == "API" && it.second == "Chargement..." }
                                            messages = messages + ("API" to response[0])
                                            isLoading = false
                                        }


                                    }
                                }
                            })
                        )



                    }



                }


            }


        }
    }
}


@Composable
fun ChatScreen(sender: String, message: String, isLoading: Boolean, HowManyGenData: String, themeViewModel: ThemeViewModel) {
    var displayedText by remember { mutableStateOf("") }

    val context = LocalContext.current // Utilisation de LocalContext pour obtenir le contexte

    val prefs = context.getSharedPreferences("pref", Context.MODE_PRIVATE)

    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()

    var gen by remember { mutableStateOf(false) }
    val coroutineScope = rememberCoroutineScope()


    val viewModel: EvalAiContentModel = viewModel()

    val responses by viewModel.responses.collectAsState()
    Log.d("ChatScreen", "Responses: $responses")
    val pagerState = rememberPagerState(pageCount = {responses.size})

    var consumed by remember { mutableStateOf(List(HowManyGenData.toInt()) { " " }) }

    var responsesList by remember { mutableStateOf(listOf<String>()) }

    var typingJob by remember { mutableStateOf<Job?>(null) }
    var isDisplayed by remember { mutableStateOf(mutableMapOf<Int, Boolean>()) }


    val generateicon = painterResource(id = R.drawable.generateicon)

    AletheiaTheme(themeViewModel, darkTheme = isDarkTheme) {


        LaunchedEffect(pagerState.currentPage) {
            typingJob?.cancel()


            if (gen && message != "Chargement..." && consumed.isNotEmpty()) {

                if (!isDisplayed.containsKey(pagerState.currentPage)) {

                    displayedText = ""
                    typingJob = coroutineScope.launch {

                        responses[pagerState.currentPage].forEach { char ->
                            isDisplayed[pagerState.currentPage] = true
                            delay(30)
                            displayedText += char
                        }

                    }

                } else {
                    displayedText = responses[pagerState.currentPage]
                }

            }
        }

        LaunchedEffect(message) {
            if (gen && message != "Chargement...") {
                displayedText = ""
                typingJob = coroutineScope.launch {

                    responses[pagerState.currentPage].forEach { char ->
                        isDisplayed[pagerState.currentPage] = true
                        delay(30)
                        displayedText += char
                    }

                }


            }
        }

        val primaryColor = MaterialTheme.colorScheme.primary
        val infiniteTransition = rememberInfiniteTransition()

        val onbackground = MaterialTheme.colorScheme.onBackground
        val waveOffset by infiniteTransition.animateFloat(
            initialValue = 300f,
            targetValue = 0f,
            animationSpec = infiniteRepeatable(
                animation = tween(durationMillis = 1000, easing = LinearOutSlowInEasing),
                repeatMode = RepeatMode.Reverse
            )
        )

        val waveScale by rememberInfiniteTransition().animateFloat(
            initialValue = 1.5f,
            targetValue = 1f,
            animationSpec = infiniteRepeatable(
                animation = tween(durationMillis = 1000, easing = LinearOutSlowInEasing),
                repeatMode = RepeatMode.Reverse
            )
        )

        if (sender == "Vous") {
            Box(
                modifier = Modifier.fillMaxWidth().padding(4.dp).padding(top = 120.dp),
                contentAlignment = Alignment.TopCenter
            ) {
                Column(
                    modifier = Modifier
                        .background(
                            Color.Transparent,
                            shape = RoundedCornerShape(8.dp)
                        )
                        .border(2.dp, MaterialTheme.colorScheme.primary, shape = RoundedCornerShape(8.dp))
                        .wrapContentSize()
                ) {
                    Text(text = message, modifier = Modifier.padding(8.dp))

                }
            }
        } else if (sender == "API") {

            Box(
                modifier = Modifier.fillMaxSize().padding(top = 120.dp),
                contentAlignment = Alignment.Center
            ) {
                Column(
                    modifier = Modifier
                        .background(
                            Color.Transparent,
                            shape = RoundedCornerShape(8.dp)
                        ),
                    horizontalAlignment = Alignment.CenterHorizontally

                ) {
                    if (isLoading && message == "Chargement...") {
                        gen = true
                        Icon(
                            painter = painterResource(id = if (isDarkTheme) R.drawable.aletheialogoclair else R.drawable.aletheialogosombre), // ton icône ici
                            contentDescription = "Icône avec dégradé",
                            modifier = Modifier

                                .padding(10.dp)
                                .size(50.dp)
                                .graphicsLayer {
                                    scaleX = waveScale
                                    scaleY = waveScale
                                    compositingStrategy = CompositingStrategy.Offscreen
                                }
                                .drawWithCache {


                                    val brush = Brush.linearGradient(
                                        colors = listOf(primaryColor, onbackground),
                                        start = Offset(waveOffset, 0f),
                                        end = Offset(waveOffset + 200f, 200f)
                                    )
                                    onDrawWithContent {
                                        drawContent()
                                        drawRect(brush = brush, blendMode = BlendMode.SrcIn)
                                    }
                                }
                        )
                    } else {
                        if (responses.isNotEmpty()) {
                            HorizontalPager(
                                state = pagerState,
                                modifier = Modifier
                                    .fillMaxWidth(),


                                ) { i ->
                                val pageOffset = (pagerState.currentPage - i) + pagerState.currentPageOffsetFraction
                                val alpha = 1f - abs(pageOffset) *2
                                Card(
                                    modifier = Modifier
                                        .align(Alignment.CenterHorizontally)
                                        .padding(16.dp)
                                        .graphicsLayer(alpha = alpha)
                                        .heightIn(min = 100.dp, max = 400.dp)
                                        .wrapContentSize(),
                                    shape = RoundedCornerShape(8.dp),
                                    colors = CardDefaults.cardColors(if (isDarkTheme) Color(0xFF1A1A1A) else Color.White)
                                ) {
                                    Text(
                                        text = displayedText,
                                        modifier = Modifier.padding(16.dp)
                                    )
                                }
                            }
                        } else {
                            Text(text = "Aucune réponse disponible")
                        }

                    }

                }
            }
        }

    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CampaignPageTopBar(getCampaigns: GetCampaigns, themeViewModel: ThemeViewModel, username: String) {
    val context = LocalContext.current // Utilisation de LocalContext pour obtenir le contexte
    val prefs = context.getSharedPreferences(username, Context.MODE_PRIVATE)
    val coroutineScope = rememberCoroutineScope()

    val isDarkTheme by themeViewModel.isDarkTheme.collectAsState()
    var showDropdown by remember { mutableStateOf(false) }
    //val models = listOf("Pythia") // Liste des modèles d'IA
    val showPromptCard = getCampaigns.show.collectAsState().value

    val nameOfCurrentCampaign = getCampaigns.nameOfCurrentCampaign.collectAsState().value

    val MyFont = FontFamily(
        Font(R.font.borel_regular, FontWeight.Normal)
    )
    // Appliquer le thème
    AletheiaTheme(themeViewModel, darkTheme = isDarkTheme) {
        val exitIcon = ImageVector.vectorResource(id = R.drawable.exiticon)

        Surface(
            modifier = Modifier.fillMaxWidth(),
            color = if (isDarkTheme) Color(0xFF1A1A1A) else Color.White,
            shadowElevation = 8.dp
        ) {

            TopAppBar(
                title = {
                    Text(
                        modifier = Modifier.padding(top = 12.dp),
                        text = if (!showPromptCard) stringResource(id = R.string.campagnes) else nameOfCurrentCampaign,
                        fontFamily = MyFont
                    )
                },
                actions = {

                    if (!showPromptCard) {
                        NoRippleIconButton(
                            onClick = {
                                //competitions ? ou autre ? -> quality data (certifier certains utilisateurs pour certaines choses... etc)
                            }

                        ) {
                            Icon(
                                modifier = Modifier.size(30.dp),
                                painter = painterResource(id = R.drawable.learnicon),
                                contentDescription = "New campaign",
                                tint = MaterialTheme.colorScheme.onBackground
                            )
                        }
                        NoRippleIconButton(
                            onClick = {
                            }

                        ) {
                            Icon(
                                modifier = Modifier.size(25.dp),
                                painter = painterResource(id = R.drawable.createcampaignicon),
                                contentDescription = "New campaign",
                                tint = MaterialTheme.colorScheme.onBackground
                            )
                        }

                        /*
                        NoRippleIconButton(
                            onClick = {
                            }

                        ) {
                            Icon(
                                modifier = Modifier.size(30.dp),
                                painter = painterResource(id = R.drawable.searchicon),
                                contentDescription = "More",
                                tint = MaterialTheme.colorScheme.onBackground
                            )
                        }

                         */
                    }
                },

                navigationIcon = {
                    if (showPromptCard) {
                        NoRippleIconButton(
                            modifier = Modifier.padding(end = 8.dp),
                            onClick = {
                                getCampaigns.toggleShow()

                            }
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.gobackicon),
                                contentDescription = "Close",
                                tint = MaterialTheme.colorScheme.onBackground
                            )
                        }
                    }

                },
                colors = TopAppBarDefaults.mediumTopAppBarColors(
                    containerColor = Color.Transparent,

                    ),

                )

        }
    }
}